//
// Copyright 2022 Nuna inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Aggregate with direct value specification.
//

def method aggregate(src: Dataset<{T}>,
  builder: Function<T, Tuple<T, {Spec: Tuple}>>)
    : DatasetAggregate<Spec> =>
[[pyimport]]import nudl.dataset[[end]]
[[pyinline]]nudl.dataset.dataset_aggregate(${src}, ${builder})[[end]]

def method group_by(t: Tuple<{T}, {A: Tuple}>, value: Tuple<{G}>)
    : Tuple<T, TupleJoin<A, Tuple<Tuple<G>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {group_by = value}) }

def method group_by(t: Tuple<{T}, {A: Tuple}>, value: {G})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<G>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {group_by = { _unnamed = value }}) }

def method sum(t: Tuple<{T}, {A: Tuple}>, value: Tuple<{V: Numeric}>)
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {sum = value}) }

def method sum(t: Tuple<{T}, {A: Tuple}>, value: {V: Numeric})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {sum = { _unnamed = value }}) }

def method min(t: Tuple<{T}, {A: Tuple}>, value: Tuple<{V: Sortable}>)
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {min = value}) }

def method min(t: Tuple<{T}, {A: Tuple}>, value: {V: Sortable})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {min = { _unnamed = value }}) }

def method max(t: Tuple<{T}, {A: Tuple}>, value: Tuple<{V: Sortable}>)
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {max = value}) }

def method max(t: Tuple<{T}, {A: Tuple}>, value: {V: Sortable})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {max = { _unnamed = value }}) }

def method count_distinct(t: Tuple<{T}, {A: Tuple}>, value: Tuple<{V: Any}>)
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {count_distinct = value}) }

def method count_distinct(t: Tuple<{T}, {A: Tuple}>, value: {V: Sortable})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(
    t[1], {count_distinct = { _unnamed = value }}) }

def method count(t: Tuple<{T}, {A: Tuple}>, value: Tuple<{C: Numeric}>)
    : Tuple<T, TupleJoin<A, Tuple<Tuple<C>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {count = value}) }

def method count(t: Tuple<{T}, {A: Tuple}>, value: {C: Numeric})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<{C}>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {count = { _unnamed = value }}) }

def method mean(t: Tuple<{T}, {A: Tuple}>, value: Tuple<{V: Numeric}>)
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {mean = value}) }

def method mean(t: Tuple<{T}, {A: Tuple}>, value: {V: Numeric})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {mean = { _unnamed = value }}) }

def method to_set(t: Tuple<{T}, {A: Tuple}>, value: Tuple<{V: Any}>)
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {to_set = value}) }

def method to_set(t: Tuple<{T}, {A: Tuple}>, value: {V: Any})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {to_set = { _unnamed = value }}) }

def method to_array(t: Tuple<{T}, {A: Tuple}>, value: Tuple<{V: Any}>)
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {to_array = value}) }

def method to_array(t: Tuple<{T}, {A: Tuple}>, value: {V: Any})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<V>>>> =>
  return { arg = t[0], agg = tuple_join(t[1], {to_array = { _unnamed = value }}) }
