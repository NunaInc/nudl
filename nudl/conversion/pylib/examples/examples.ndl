//
// Copyright 2022 Nuna inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Some simple examples:

import examples.cdm

// Top level parameter:
param x: Int = 20

// Untyped function - bound upon calling a'la C++ templates.
def foo(p, q) => p + q

// Top level constant
y: Int = foo(x, 30)

// Example function with fully defined type:
def ExtractFullName(name: cdm.HumanName) : String => {
  concat([concat(name.prefix, " "),
          ensure(name.family),
          ensure(name.given),
          concat(name.suffix, " ")], " ")
}

// Another function with inferred retrun type:
def IsDillinger(name: cdm.HumanName) =>
  ensure(name.family) == "Dillinger" and ensure(name.given) == "John"

// Another function example:
def MaxTermination(name: cdm.HumanName) =>
  max([len(name.prefix), len(name.suffix)])

// Plays with the above:

// Returns the max len of a list of lists or so.
// Also makes it a member of Iterable, so we can call it fluently:
def method maxlen(l: Iterable<Container<{X}>>) => l.map(len).max()

// Same as above but uses maxlen (in a fluent way):
def MaxTermination2(name: cdm.HumanName) => {
  [name.prefix, name.suffix].maxlen()
}

// Untyped maxlen from above:
def maxlen2(l) => l.map(len).max()

// Using maxlen2 in a fluent way:
def MaxTermination3(name: cdm.HumanName) => {
  maxlen2([name.prefix, name.suffix])
}

def FilterName(names: Array<String>, extra: String) => {
  filtered = names.filter((name, arg=extra) => { len(name) > len(arg) });
  return not filtered.empty();
}

import examples.submodule

z = examples.submodule.area(10)

import examples.submodule.compute

z2 = examples.submodule.compute.square_circle_area(10)
