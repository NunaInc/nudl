//
// Copyright 2022 Nuna inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Aggregate with functions providing values - another version to mess around.
//
def method aggregate(src: Dataset<{T}>,
  builder: Function<T, {Agg: Tuple<T, {Spec: Tuple}>}>)
    : DatasetAggregate<Agg> =>
[[pyinline]]nudl.dataset.aggregate_v2(${src}, ${builder})[[end]]

def method group_by(t: Tuple<{T}, {A: Tuple}>, spec: {G: Tuple<Function<T, {X}>>})
    : Tuple<T, TupleJoin<A, Tuple<G>>> =>
  { arg = t[0], agg = tuple_join(t[1], {group_by = spec}) }

def method group_by(t: Tuple<{T}, {A: Tuple}>, spec: {G: Function<T, {X}>})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<G>>>> =>
  { arg = t[0], agg = tuple_join(t[1], {group_by = { _unnamed = spec }}) }

def method sum(t: Tuple<{T}, {A: Tuple}>, spec: {G: Tuple<Function<T, {X: Numeric}>>})
    : Tuple<T, TupleJoin<A, Tuple<G>>> =>
  { arg = t[0], agg = tuple_join(t[1], {sum = spec}) }

def method sum(t: Tuple<{T}, {A: Tuple}>, spec: {G: Function<T, {X: Numeric}>})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<G>>>> =>
  { arg = t[0], agg = tuple_join(t[1], {sum = { _unnamed = spec }}) }

def method min(t: Tuple<{T}, {A: Tuple}>, spec: {G: Tuple<Function<T, {X: Sortable}>>})
    : Tuple<T, TupleJoin<A, Tuple<G>>> =>
  { arg = t[0], agg = tuple_join(t[1], {min = spec}) }

def method min(t: Tuple<{T}, {A: Tuple}>, spec: {G: Function<T, {X: Sortable}>})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<G>>>> =>
  { arg = t[0], agg = tuple_join(t[1], {min = { _unnamed = spec }}) }

def method max(t: Tuple<{T}, {A: Tuple}>, spec: {G: Tuple<Function<T, {X: Sortable}>>})
    : Tuple<T, TupleJoin<A, Tuple<G>>> =>
  { arg = t[0], agg = tuple_join(t[1], {max = spec}) }

def method max(t: Tuple<{T}, {A: Tuple}>, spec: {G: Function<T, {X: Sortable}>})
    : Tuple<T, TupleJoin<A, Tuple<Tuple<G>>>> =>
  { arg = t[0], agg = tuple_join(t[1], {max = { _unnamed = spec }}) }

def method count(t: Tuple<{T}, {A: Tuple}>), spec: {G: Tuple<Int>})
    : Tuple<T, TupleJoin<A, Tuple<G>>> =>
  { arg = t[0], agg = tuple_join(t[1], {count = spec}) }

def method count(t: Tuple<{T}, {A: Tuple}>)
    : Tuple<T, TupleJoin<A, Tuple<Tuple<G>>>> =>
  { arg = t[0], agg = tuple_join(t[1], {count = { _unnamed = 1 }}) }
