#
# Copyright 2022 Nuna inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
package(default_visibility = ["//visibility:private"])

load("//external/cpplint:cpplint.bzl", "cpplint")

cc_test(
    name = "names_test",
    srcs = ["names_test.cc"],
    deps = [
        "//nudl/analysis",
        "//nudl/status:testing",
        "//nudl/testing:protobuf_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "types_test",
    srcs = ["types_test.cc"],
    deps = [
        "//nudl/analysis",
        "//nudl/grammar",
        "//nudl/status:testing",
        "//nudl/testing:protobuf_matchers",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "analysis_test",
    testonly = 1,
    srcs = ["analysis_test.cc"],
    hdrs = ["analysis_test.h"],
    data = ["//nudl/analysis/testing/testdata:builtins.ndl"],
    deps = [
        "//nudl/analysis",
        "//nudl/conversion",
        "//nudl/status:testing",
        "//nudl/testing:protobuf_matchers",
        "@com_google_absl//absl/debugging:failure_signal_handler",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "lambda_test",
    srcs = ["lambda_test.cc"],
    data = [
        "//nudl/analysis/testing/testdata:cdm.ndl",
        "//nudl/analysis/testing/testdata:lambda_test",
    ],
    deps = [
        ":analysis_test",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "general_test",
    srcs = ["general_test.cc"],
    data = [
        "//nudl/analysis/testing/testdata:cdm.ndl",
        "//nudl/analysis/testing/testdata:general_test",
        "//nudl/analysis/testing/testdata:submodule/__init__.ndl",
        "//nudl/analysis/testing/testdata:submodule/compute.ndl",
    ],
    deps = [
        ":analysis_test",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "coverage_test",
    srcs = ["coverage_test.cc"],
    data = [
        "//nudl/analysis/testing/testdata:cdm.ndl",
        "//nudl/analysis/testing/testdata:coverage_test",
    ],
    deps = [
        ":analysis_test",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "expression_test",
    srcs = ["expression_test.cc"],
    data = [
        "//nudl/analysis/testing/testdata:cdm.ndl",
        "//nudl/analysis/testing/testdata:coverage_test",
    ],
    deps = [
        ":analysis_test",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "constructors_test",
    srcs = ["constructors_test.cc"],
    data = [
        "//nudl/analysis/testing/testdata:cdm.ndl",
        "//nudl/analysis/testing/testdata:constructors_test",
        "//nudl/analysis/testing/testdata:submodule/__init__.ndl",
        "//nudl/analysis/testing/testdata:submodule/compute.ndl",
    ],
    deps = [
        ":analysis_test",
        "@com_google_googletest//:gtest",
    ],
)

cpplint()
